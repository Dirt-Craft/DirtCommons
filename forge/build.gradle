buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven"}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.1'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "org.spongepowered.mixin"

version = project.ext.fullVersion
archivesBaseName = "${name}-Forge-${project.ext.fullVersion}.jar"
group = "net.dirtcraft.${modId}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shadowImpl
    shadowAPI
    implimentation.extendsFrom(shadowImpl)
    api.extendsFrom(shadowAPI)
}

dependencies {
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor")
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.25'
    shadowAPI project(':common')
    shadowAPI project(':api')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    archiveName = archivesBaseName
    manifest {
        attributes([
            "Specification-Title": project.ext.name,
            "Specification-Vendor": "DirtCraft",
            "Specification-Version": "${project.ext.fullVersion}",
            "Implementation-Title": project.ext.name,
            "Implementation-Version": "${project.ext.fullVersion}",
            "Implementation-Vendor" :"DirtCraft",
            "TweakClass":"org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0,
            "MixinConfigs":project.ext.mixinConfig,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


processResources {
    inputs.properties(
            'version': project.ext.fullVersion,
            'description' : modDescription,
            'name'   : modName,
            'id'     : modId
    )

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand (
                'version': project.ext.fullVersion,
                'description' : modDescription,
                'name': modName,
                'id': modId
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowImpl, project.configurations.shadowAPI]
    archiveName = archivesBaseName
    dependencies {
        //exclude('net.minecraft.forge:.*')
        //include(dependency('net.dirtcraft:.*'))
        //relocate 'net.kyori.adventure', 'net.dirtcraft.dirtcommons.lib.adventure'
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args("--mixin.config", project.ext.mixinConfig.toString())
            workingDirectory(project.file("run"))
            singleInstance(true)

            mods {
                dirtcommons {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args("--mixin.config", project.ext.mixinConfig.toString())
            workingDirectory(project.file("run"))
            singleInstance(true)

            mods {
                dirtcommons {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dirtcommons {
                    source sourceSets.main
                }
            }
        }
    }
}


mixin {
    add(sourceSets.main, project.ext.refmap)
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')
